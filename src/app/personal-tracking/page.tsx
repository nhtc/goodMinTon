'use client'

import { useState } from 'react'
import Link from 'next/link'
import { AuthorizedComponent } from '@/components/AuthorizedComponent'
import PersonalEventCard from '@/components/PersonalEventCard'
import PersonalEventDetailsModal from '@/components/PersonalEventDetailsModal'
import PersonalEventForm from '@/components/PersonalEventForm'
import ConfirmationModal from '@/components/ConfirmationModal'
import Modal from '@/components/Modal'
import { usePersonalEvents, useDeletePersonalEvent, useUpdatePersonalEvent, useCreatePersonalEvent } from '@/hooks/useQueries'
import { useToast } from '@/hooks/useToast'
import { PersonalEvent, PersonalEventFilters, CreatePersonalEventData, UpdatePersonalEventData } from '@/types'
import styles from './page.module.css'

// Constants
const PAYMENT_STATUS_OPTIONS = {
  ALL: 'all' as const,
  PAID: 'paid' as const,
  UNPAID: 'unpaid' as const
} as const

const TOAST_MESSAGES = {
  EVENT_DELETED: 'S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng',
  EVENT_UPDATED: 'S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng',
  EVENT_CREATED: 'S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
  DELETE_ERROR: 'C√≥ l·ªói x·∫£y ra khi x√≥a s·ª± ki·ªán',
  SAVE_ERROR: 'C√≥ l·ªói x·∫£y ra khi l∆∞u s·ª± ki·ªán'
} as const

const PersonalTrackingPage: React.FC = () => {
  // State management
  const [selectedEvent, setSelectedEvent] = useState<PersonalEvent | null>(null)
  const [showForm, setShowForm] = useState(false)
  const [editingEvent, setEditingEvent] = useState<PersonalEvent | null>(null)
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false)
  const [eventToDelete, setEventToDelete] = useState<PersonalEvent | null>(null)
  
  // Search and filter states
  const [searchTerm, setSearchTerm] = useState<string>('')
  const [dateRange, setDateRange] = useState<{ start?: string; end?: string }>({})
  const [paymentStatus, setPaymentStatus] = useState<'all' | 'paid' | 'unpaid'>(PAYMENT_STATUS_OPTIONS.ALL)
  const [selectedMember, setSelectedMember] = useState<string>('')

  // Create filters object
  const filters: PersonalEventFilters = {
    search: searchTerm || undefined,
    startDate: dateRange.start || undefined,
    endDate: dateRange.end || undefined,
    memberId: selectedMember || undefined,
  }

  // Only pass filters if there are actual filter values
  const hasActiveFilters = filters.search || filters.startDate || filters.endDate || filters.memberId
  
  // Hooks
  const { data: personalEventsResponse, isLoading, error } = usePersonalEvents(hasActiveFilters ? filters : undefined)
  const personalEvents = personalEventsResponse?.data || []
  const deletePersonalEventMutation = useDeletePersonalEvent()
  const updatePersonalEventMutation = useUpdatePersonalEvent()
  const createPersonalEventMutation = useCreatePersonalEvent()
  const { addToast } = useToast()

  // Filter events based on search term
  const filteredEvents = personalEvents.filter(event => {
    const matchesSearch = searchTerm === '' || 
      event.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (event.description && event.description.toLowerCase().includes(searchTerm.toLowerCase())) ||
      event.participants.some(p => p.member.name.toLowerCase().includes(searchTerm.toLowerCase()))

    return matchesSearch
  })

  // Calculate statistics
  const totalEvents = filteredEvents.length
  const totalParticipants = filteredEvents.reduce((sum, event) => sum + event.participants.length, 0)
  const totalAmount = filteredEvents.reduce((sum, event) => sum + event.totalCost, 0)
  const paidParticipants = filteredEvents.reduce((sum, event) => 
    sum + event.participants.filter(p => p.hasPaid).length, 0
  )

  // Event handlers
  const handleCreateEvent = () => {
    setEditingEvent(null)
    setShowForm(true)
  }

  const handleEditEvent = (event: PersonalEvent) => {
    setEditingEvent(event)
    setShowForm(true)
  }

  const handleDeleteEvent = (event: PersonalEvent) => {
    setEventToDelete(event)
    setShowDeleteConfirm(true)
  }

  const handleConfirmDeleteEvent = async () => {
    if (!eventToDelete) return
    
    try {
      await deletePersonalEventMutation.mutateAsync(eventToDelete.id)
      addToast('success', 'Th√†nh c√¥ng', TOAST_MESSAGES.EVENT_DELETED)
      setShowDeleteConfirm(false)
      setEventToDelete(null)
      if (selectedEvent && selectedEvent.id === eventToDelete.id) {
        setSelectedEvent(null)
      }
    } catch (error) {
      console.error('Error deleting event:', error)
      addToast('error', 'L·ªói', TOAST_MESSAGES.DELETE_ERROR)
    }
  }

  const handleCancelDeleteEvent = () => {
    setShowDeleteConfirm(false)
    setEventToDelete(null)
  }

  const handleFormSubmit = async (eventData: CreatePersonalEventData | UpdatePersonalEventData) => {
    try {
      if (editingEvent) {
        await updatePersonalEventMutation.mutateAsync({
          eventId: editingEvent.id,
          eventData: eventData as UpdatePersonalEventData
        })
        addToast('success', 'Th√†nh c√¥ng', TOAST_MESSAGES.EVENT_UPDATED)
      } else {
        await createPersonalEventMutation.mutateAsync(eventData as CreatePersonalEventData)
        addToast('success', 'Th√†nh c√¥ng', TOAST_MESSAGES.EVENT_CREATED)
      }
      setShowForm(false)
      setEditingEvent(null)
    } catch (error) {
      console.error('Error saving event:', error)
      addToast('error', 'L·ªói', TOAST_MESSAGES.SAVE_ERROR)
    }
  }

  const handleFormCancel = () => {
    setShowForm(false)
    setEditingEvent(null)
  }

  const clearSearch = () => {
    setSearchTerm('')
  }

  const clearFilters = (): void => {
    setDateRange({})
    setPaymentStatus(PAYMENT_STATUS_OPTIONS.ALL)
    setSelectedMember('')
  }

  return (
    <AuthorizedComponent>
      <div className={styles.container}>
        {/* Page Header */}
        <div className={styles.pageHeader}>
          <div className={styles.headerContent}>
            <div className={styles.titleSection}>
              <div className={styles.pageIcon}>üë•</div>
              <div>
                <h1 className={styles.pageTitle}>Theo D√µi C√° Nh√¢n</h1>
                <p className={styles.pageSubtitle}>
                  Qu·∫£n l√Ω v√† theo d√µi thanh to√°n cho c√°c s·ª± ki·ªán c√° nh√¢n
                </p>
              </div>
            </div>
            <button
              onClick={handleCreateEvent}
              className={styles.createEventBtn}
              title="T·∫°o s·ª± ki·ªán m·ªõi"
            >
              <span className={styles.btnIcon}>‚ûï</span>
              <span>T·∫°o S·ª± Ki·ªán</span>
            </button>
          </div>

          {/* Statistics */}
          <div className={styles.statsSection}>
            <div className={styles.statCard}>
              <div className={styles.statIcon}>üìÖ</div>
              <div className={styles.statInfo}>
                <div className={styles.statValue}>{totalEvents}</div>
                <div className={styles.statLabel}>S·ª± ki·ªán</div>
              </div>
            </div>
            <div className={styles.statCard}>
              <div className={styles.statIcon}>üë•</div>
              <div className={styles.statInfo}>
                <div className={styles.statValue}>{totalParticipants}</div>
                <div className={styles.statLabel}>Tham gia</div>
              </div>
            </div>
            <div className={styles.statCard}>
              <div className={styles.statIcon}>üí∞</div>
              <div className={styles.statInfo}>
                <div className={styles.statValue}>
                  {totalAmount.toLocaleString('vi-VN')}ƒë
                </div>
                <div className={styles.statLabel}>T·ªïng chi ph√≠</div>
              </div>
            </div>
            <div className={styles.statCard}>
              <div className={styles.statIcon}>‚úÖ</div>
              <div className={styles.statInfo}>
                <div className={styles.statValue}>
                  {totalParticipants > 0 
                    ? Math.round((paidParticipants / totalParticipants) * 100)
                    : 0}%
                </div>
                <div className={styles.statLabel}>ƒê√£ thanh to√°n</div>
              </div>
            </div>
          </div>
        </div>

        {/* Form Modal */}
        {showForm && (
          <Modal
            isOpen={showForm}
            title={editingEvent ? 'Ch·ªânh S·ª≠a S·ª± Ki·ªán' : 'T·∫°o S·ª± Ki·ªán M·ªõi'}
            onClose={handleFormCancel}
          >
            <PersonalEventForm
              members={[]} // We'll need to get members from somewhere
              initialData={editingEvent || undefined}
              isEditing={!!editingEvent}
              isSubmitting={createPersonalEventMutation.isPending || updatePersonalEventMutation.isPending}
              onSubmit={handleFormSubmit}
            />
          </Modal>
        )}

        {/* Search and Filter */}
        {personalEvents.length > 0 && (
          <div className={styles.searchSection}>
            <div className={styles.searchWrapper}>
              <div className={styles.searchIcon}>üîç</div>
              <input
                type="text"
                placeholder="T√¨m ki·∫øm theo t√™n s·ª± ki·ªán, m√¥ t·∫£ ho·∫∑c t√™n th√†nh vi√™n..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className={styles.searchInput}
              />
              {searchTerm && (
                <button
                  onClick={clearSearch}
                  className={styles.searchClear}
                >
                  ‚úï
                </button>
              )}
            </div>

            {/* Filter Controls */}
            <div className={styles.filterControls}>
              <div className={styles.filterGroup}>
                <label className={styles.filterLabel}>Kho·∫£ng th·ªùi gian:</label>
                <div className={styles.dateRangeInputs}>
                  <input
                    type="date"
                    value={dateRange.start || ''}
                    onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value }))}
                    className={styles.dateInput}
                    title="T·ª´ ng√†y"
                  />
                  <span className={styles.dateSeparator}>ƒë·∫øn</span>
                  <input
                    type="date"
                    value={dateRange.end || ''}
                    onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value }))}
                    className={styles.dateInput}
                    title="ƒê·∫øn ng√†y"
                  />
                </div>
              </div>

              <div className={styles.filterGroup}>
                <label className={styles.filterLabel}>Tr·∫°ng th√°i thanh to√°n:</label>
                <select
                  value={paymentStatus}
                  onChange={(e) => setPaymentStatus(e.target.value as 'all' | 'paid' | 'unpaid')}
                  className={styles.filterSelect}
                  title="Ch·ªçn tr·∫°ng th√°i thanh to√°n"
                >
                  <option value="all">T·∫•t c·∫£</option>
                  <option value="paid">ƒê√£ thanh to√°n</option>
                  <option value="unpaid">Ch∆∞a thanh to√°n</option>
                </select>
              </div>

              {(dateRange.start || dateRange.end || paymentStatus !== PAYMENT_STATUS_OPTIONS.ALL || selectedMember) && (
                <button
                  onClick={clearFilters}
                  className={styles.clearFiltersBtn}
                >
                  X√≥a b·ªô l·ªçc
                </button>
              )}
            </div>

            {searchTerm && (
              <div className={styles.searchResults}>
                T√¨m th·∫•y {filteredEvents.length} s·ª± ki·ªán
              </div>
            )}
          </div>
        )}

        {/* Events List */}
        {isLoading ? (
          <div className={styles.loadingState}>
            <div className={styles.loadingSpinner}></div>
            <p>ƒêang t·∫£i s·ª± ki·ªán...</p>
          </div>
        ) : error ? (
          <div className={styles.errorState}>
            <div className={styles.errorIcon}>‚ö†Ô∏è</div>
            <h3>C√≥ l·ªói x·∫£y ra</h3>
            <p>Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i.</p>
          </div>
        ) : filteredEvents.length === 0 ? (
          <div className={styles.emptyState}>
            <div className={styles.emptyIcon}>üë•</div>
            <h3 className={styles.emptyTitle}>
              {personalEvents.length === 0
                ? "Ch∆∞a c√≥ s·ª± ki·ªán n√†o"
                : "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán n√†o"}
            </h3>
            <p className={styles.emptyDescription}>
              {personalEvents.length === 0
                ? "H√£y t·∫°o s·ª± ki·ªán c√° nh√¢n ƒë·∫ßu ti√™n c·ªßa b·∫°n!"
                : "Th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c thay ƒë·ªïi b·ªô l·ªçc"}
            </p>
            {personalEvents.length === 0 && (
              <button
                onClick={handleCreateEvent}
                className={styles.emptyAction}
              >
                <span className={styles.btnIcon}>‚ûï</span>
                T·∫°o s·ª± ki·ªán ƒë·∫ßu ti√™n
              </button>
            )}
          </div>
        ) : (
          <div className={styles.eventsSection}>
            <div className={styles.sectionHeader}>
              <h2>üìÖ Danh S√°ch S·ª± Ki·ªán</h2>
              <div className={styles.eventsCount}>
                {filteredEvents.length} s·ª± ki·ªán
              </div>
            </div>

            <div className={styles.eventsGrid}>
              {filteredEvents.map((event, index) => (
                <PersonalEventCard
                  key={event.id}
                  event={event}
                  onClick={(event) => setSelectedEvent(event)}
                />
              ))}
            </div>
          </div>
        )}

        {/* Event Details Modal */}
        {selectedEvent && (
          <PersonalEventDetailsModal
            isOpen={!!selectedEvent}
            event={selectedEvent}
            mode="view"
            onClose={() => setSelectedEvent(null)}
            onSave={async (data) => {
              // Handle save if needed
            }}
            onDelete={async (eventId) => {
              const event = personalEvents.find(e => e.id === eventId)
              if (event) {
                handleDeleteEvent(event)
              }
              setSelectedEvent(null)
            }}
          />
        )}

        {/* Delete Confirmation Modal */}
        <ConfirmationModal
          isOpen={showDeleteConfirm}
          onClose={handleCancelDeleteEvent}
          onConfirm={handleConfirmDeleteEvent}
          title="X√≥a s·ª± ki·ªán"
          message={
            eventToDelete
              ? `B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·ª± ki·ªán "${eventToDelete.title}" kh√¥ng? T·∫•t c·∫£ d·ªØ li·ªáu thanh to√°n s·∫Ω b·ªã m·∫•t v√† kh√¥ng th·ªÉ kh√¥i ph·ª•c.`
              : ""
          }
          confirmText="X√≥a s·ª± ki·ªán"
          cancelText="H·ªßy b·ªè"
          type="danger"
          isLoading={deletePersonalEventMutation.isPending}
        />
      </div>
    </AuthorizedComponent>
  )
}

export default PersonalTrackingPage
